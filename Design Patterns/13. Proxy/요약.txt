특정 객체에 대한 대리인(Proxy) 을 제공하여 접근을 제어

접근 제어: 특정 객체에 대한 접근을 제한 가능
성능 최적화: 리소스를 많이 소모하는 객체를 필요할 때만 생성하는 지연 로딩(lazy initialization) 을 구현 가능
추가 기능 제공: 원래 객체를 변경하지 않고 로깅, 캐싱, 권한 검사 등의 기능을 추가 가능

class Image {
public:
    virtual void display() = 0;
    virtual ~Image() = default;
};

class RealImage : public Image {
private:
    std::string filename;

public:
    RealImage(const std::string& filename) : filename(filename) {
        loadFromDisk();
    }

    void loadFromDisk() {
        std::cout << "Loading image: " << filename << std::endl;
    }

    void display() override {
        std::cout << "Displaying image: " << filename << std::endl;
    }
};

class ProxyImage : public Image {
private:
    std::string filename;
    std::unique_ptr<RealImage> realImage;

public:
    ProxyImage(const std::string& filename) : filename(filename), realImage(nullptr) {}

    void display() override {
        if (!realImage) {
            realImage = std::make_unique<RealImage>(filename);
        }
        realImage->display();
    }
};