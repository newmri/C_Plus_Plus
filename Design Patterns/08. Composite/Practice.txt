#include <iostream>
#include <string>
#include <vector>
using namespace std;

struct ContainsIntegers
{
    virtual int sum() = 0;
};

struct SingleValue : ContainsIntegers
{
  int value{ 0 };

  SingleValue() = default;

  explicit SingleValue(const int value)
    : value{value}
  {
  }
  
  // TODO
   virtual int sum() override {  return value; }
};

struct ManyValues : vector<int>, ContainsIntegers
{
  void add(const int value)
  {
    push_back(value);
  }
  
  virtual int sum() override
  {
        int result = 0;
        for (int value : *this)
        {
            result += value;
        }
        return result;
  }
};

int sum(const vector<ContainsIntegers*> items);

#include "exercise.h"

int sum(const vector<ContainsIntegers*> items)
{
    int result = 0;
    for(const auto& d : items)
        result += d->sum();
        
    return result;
}