하나의 클래스에 대해 단 하나의 인스턴스만 생성되도록 보장

1. 유일한 인스턴스 제공 → 같은 객체를 여러 번 생성하지 않음
2. 전역 접근 가능 → getInstance() 같은 정적 메서드를 통해 접근
3. 인스턴스가 한 번만 생성됨 → 프로그램 종료 시까지 유지됨

class Singleton {
private:
    // 생성자를 private으로 설정하여 외부에서 인스턴스 생성 방지
    Singleton() { std::cout << "Singleton Instance Created\n"; }

public:
    // 복사 생성자와 대입 연산자를 삭제하여 복사 방지
    Singleton(const Singleton&) = delete;
    Singleton& operator=(const Singleton&) = delete;

    // 유일한 인스턴스를 반환하는 정적 메서드
    static Singleton& getInstance() {
        static Singleton instance; // C++11 이후, 정적 지역 변수는 Thread-Safe함
        return instance;
    }

    void show() { std::cout << "Singleton Instance is being used\n"; }
};