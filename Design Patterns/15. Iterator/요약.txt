컬렉션(배열, 리스트 등)에 저장된 요소들을 순차적으로 접근할 수 있도록 함

컬렉션의 내부 구조를 숨기고 순회 가능
사용자는 컬렉션이 배열이든, 연결 리스트든, 해시맵이든 상관없이 동일한 인터페이스로 순회 가능

일관된 인터페이스 제공
서로 다른 자료구조라도 같은 방식으로 접근할 수 있어 코드의 유지보수가 용이

다양한 순회 방식 지원
정방향, 역방향, 특정 조건을 만족하는 요소만 순회 등 다양한 방식으로 데이터 순회 가능

#include <iostream>
#include <vector>

// Iterator 인터페이스
class Iterator {
public:
    virtual bool hasNext() = 0;
    virtual int next() = 0;
    virtual ~Iterator() = default;
};

// Concrete Iterator
class VectorIterator : public Iterator {
private:
    std::vector<int> data;
    size_t index;
public:
    VectorIterator(const std::vector<int>& vec) : data(vec), index(0) {}

    bool hasNext() override {
        return index < data.size();
    }

    int next() override {
        return hasNext() ? data[index++] : -1; // -1은 예외 처리용
    }
};

// Aggregate 인터페이스
class Aggregate {
public:
    virtual Iterator* createIterator() = 0;
    virtual ~Aggregate() = default;
};

// Concrete Aggregate
class NumberCollection : public Aggregate {
private:
    std::vector<int> numbers;
public:
    NumberCollection(std::initializer_list<int> list) : numbers(list) {}

    Iterator* createIterator() override {
        return new VectorIterator(numbers);
    }
};

int main() {
    NumberCollection collection = {1, 2, 3, 4, 5};
    Iterator* it = collection.createIterator();

    while (it->hasNext()) {
        std::cout << it->next() << " ";
    }
    delete it; // 메모리 해제

    return 0;
}
