#include <vector>
#include <iostream>

using namespace std;

struct Creature;
struct Game
{
	vector<Creature*> creatures;
};

struct StatQuery
{
	enum Statistic { attack, defense } statistic;
	int result;
};

struct Creature
{
protected:
	Game& game;
	int base_attack, base_defense;

public:
	Creature(Game& game, int base_attack, int base_defense) : game(game), base_attack(base_attack),
		base_defense(base_defense) {}
	virtual int get_attack() = 0;
	virtual int get_defense() = 0;
	virtual void query(Creature* creature, StatQuery& stat_query) = 0;
};

class Goblin : public Creature
{
public:
	Goblin(Game& game, int base_attack, int base_defense) : Creature(game, base_attack, base_defense) {}

	Goblin(Game& game) : Creature(game, 1, 1) {}

	int get_statistic(const StatQuery::Statistic stat)
	{
		int base_value = 0;
		if (StatQuery::attack == stat)
			base_value = base_attack;
		else
			base_value = base_defense;

		StatQuery stat_query{ stat, base_value };

		for (const auto& d : game.creatures)
		{
			if(d != this)
				d->query(this, stat_query);
		}

		return stat_query.result;
	}

	int get_attack() override
	{
		return get_statistic(StatQuery::attack);
	}

	int get_defense() override
	{
		return get_statistic(StatQuery::defense);
	}

	virtual void query(Creature* creature, StatQuery& stat_query) override
	{
		if (StatQuery::defense == stat_query.statistic)
			stat_query.result += 1;
	}
};

class GoblinKing : public Goblin
{
public:
	GoblinKing(Game& game) : Goblin(game, 3, 3) {}

	virtual void query(Creature* creature, StatQuery& stat_query) override
	{
		stat_query.result += 1;
	}
};


int main()
{
	Game game;
	Goblin goblin(game);
	game.creatures.push_back(&goblin);

	Goblin goblin2{ game };
	game.creatures.push_back(&goblin2);

	GoblinKing goblin3{ game };
	game.creatures.push_back(&goblin3);

	std::cout<<goblin.get_attack() << std::endl;
	std::cout<<goblin.get_defense() << std::endl;

}