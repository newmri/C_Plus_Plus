객체 지향 프로그래밍(OOP)에서 유지보수성과 확장성을 높이기 위한 5가지 핵심 설계 원칙

1. 단일 책임 원칙 (SRP - Single Responsibility Principle)
	"클래스는 단 하나의 책임만 가져야 한다."

	클래스는 하나의 기능(책임)만 가져야 하며, 변경 이유가 하나뿐이어야 한다.
	여러 개의 역할을 가진 클래스는 분리해야 한다.

class ReportGenerator {
public:
    void generateReport() { /* 보고서 생성 */ }
};

class ReportPrinter {
public:
    void printReport() { /* 보고서 출력 */ }
};

2. 개방-폐쇄 원칙 (OCP - Open/Closed Principle)
	"코드는 확장에는 열려 있어야 하지만, 변경에는 닫혀 있어야 한다."

	새로운 기능을 추가할 때 기존 코드를 수정하지 않고 확장할 수 있어야 한다.
	추상 클래스와 인터페이스를 활용하여 확장성을 높인다.

class Shape {
public:
    virtual double area() const = 0; // 확장을 위한 인터페이스
};

class Circle : public Shape {
public:
    double area() const override { /* 원의 넓이 계산 */ }
};

class Rectangle : public Shape {
public:
    double area() const override { /* 사각형의 넓이 계산 */ }
};

3. 리스코프 치환 원칙 (LSP - Liskov Substitution Principle)
	"하위 클래스는 상위 클래스를 대체할 수 있어야 한다."

	상속을 사용할 때, 자식 클래스가 부모 클래스를 완전히 대체할 수 있어야 한다.
	기능을 제한하는 상속(예: 일부 기능을 비활성화)은 원칙을 위반하는 경우가 많다.

class Bird {
public:
    virtual void fly() { /* 날기 기능 */ }
};

class Sparrow : public Bird {
public:
    void fly() override { /* 참새는 정상적으로 날 수 있음 */ }
};

class Penguin : public Bird {
public:
    void fly() override {
        throw std::logic_error("Penguins can't fly!");  // 위반
    }
};

4. 인터페이스 분리 원칙 (ISP - Interface Segregation Principle)
	"클라이언트는 사용하지 않는 메서드에 의존하지 않아야 한다."

	인터페이스를 세분화하여 필요한 기능만 제공해야 한다.
	하나의 거대한 인터페이스보다 작은 인터페이스 여러 개가 더 좋다.

class Printer {
public:
    virtual void print() = 0;
};

class Scanner {
public:
    virtual void scan() = 0;
};

// 개별 인터페이스를 구현
class MultiFunctionPrinter : public Printer, public Scanner {
public:
    void print() override { /* 프린트 기능 */ }
    void scan() override { /* 스캔 기능 */ }
};

5. 의존 역전 원칙 (DIP - Dependency Inversion Principle)
	"고수준 모듈은 저수준 모듈에 의존하면 안 되며, 둘 다 추상화에 의존해야 한다."

	구체적인 클래스가 아니라 인터페이스나 추상 클래스에 의존해야 한다.
	의존성 주입(DI, Dependency Injection)을 활용하여 유연한 설계를 만든다.

class Keyboard {
public:
    virtual void type() = 0;
};

class MechanicalKeyboard : public Keyboard {
public:
    void type() override { /* 기계식 키보드 입력 */ }
};

class Computer {
private:
    Keyboard& keyboard;
public:
    Computer(Keyboard& k) : keyboard(k) {}
    void input() { keyboard.type(); }
};

Computer가 Keyboard 인터페이스에 의존 → 구체적인 MechanicalKeyboard를 직접 의존하지 않음

