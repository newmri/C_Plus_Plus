일대다(1:N) 의존 관계를 설정하여 한 객체의 상태 변화가 여러 객체에 자동으로 전파

+-------------------+        +--------------------+
|   Subject        |        |    Observer       |
+-------------------+        +--------------------+
| - observers[]    |        | + update()        |
| + attach(obs)    | <------| (인터페이스/추상클래스) |
| + detach(obs)    |        +--------------------+
| + notify()       |        
+-------------------+        
       ▲                        
       |                        
       |                        
+--------------------+  +--------------------+
| ConcreteObserverA |  | ConcreteObserverB |
| + update()       |  | + update()        |
+--------------------+  +--------------------+

Subject는 여러 Observer들을 관리하고 상태 변경 시 이를 **notify()**를 통해 옵저버들에게 알림
Observer들은 update()를 구현하여 Subject의 변경에 반응

#include <iostream>
#include <vector>
#include <memory>

class Observer {
public:
    virtual void update(int data) = 0;
    virtual ~Observer() = default;
};

class Subject {
private:
    std::vector<Observer*> observers;
    int state;

public:
    void attach(Observer* obs) {
        observers.push_back(obs);
    }

    void detach(Observer* obs) {
        observers.erase(std::remove(observers.begin(), observers.end(), obs), observers.end());
    }

    void notify() {
        for (Observer* obs : observers) {
            obs->update(state);
        }
    }

    void setState(int value) {
        state = value;
        notify();
    }
};

class ConcreteObserver : public Observer {
private:
    std::string name;
public:
    ConcreteObserver(std::string n) : name(n) {}

    void update(int data) override {
        std::cout << name << " received update: " << data << std::endl;
    }
};

int main() {
    Subject subject;

    ConcreteObserver observer1("Observer1");
    ConcreteObserver observer2("Observer2");

    subject.attach(&observer1);
    subject.attach(&observer2);

    subject.setState(10);  // 모든 옵저버에게 알림 전송

    subject.detach(&observer1);
    subject.setState(20);  // observer2만 업데이트됨

    return 0;
}
