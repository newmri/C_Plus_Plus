객체 간의 직접적인 의존성을 줄이고, 객체 간의 통신을 중앙에서 관리

객체들이 서로 직접 통신하지 않고 중재자(Mediator) 를 통해서만 통신한
클래스 간의 의존성을 줄여서 코드를 더 모듈화 가능
새로운 객체를 추가할 때 기존 클래스들을 수정하지 않아도 됨

#include <iostream>
#include <string>
#include <vector>

// 중재자 인터페이스
class Mediator {
public:
    virtual void sendMessage(const std::string& message, class Colleague* sender) = 0;
};

// 협력자(Colleague) 기본 클래스
class Colleague {
protected:
    Mediator* mediator;
public:
    Colleague(Mediator* mediator) : mediator(mediator) {}
    virtual void receiveMessage(const std::string& message) = 0;
};

// 구체적인 협력자 클래스 1
class User : public Colleague {
    std::string name;
public:
    User(Mediator* mediator, const std::string& name) : Colleague(mediator), name(name) {}
    
    void sendMessage(const std::string& message) {
        std::cout << name << "가 메시지를 보냄: " << message << std::endl;
        mediator->sendMessage(message, this);
    }

    void receiveMessage(const std::string& message) override {
        std::cout << name << "가 메시지를 받음: " << message << std::endl;
    }
};

// 구체적인 중재자 클래스
class ChatMediator : public Mediator {
    std::vector<User*> users;
public:
    void addUser(User* user) {
        users.push_back(user);
    }

    void sendMessage(const std::string& message, Colleague* sender) override {
        for (User* user : users) {
            if (user != sender) {  // 자기 자신에게는 메시지를 보내지 않음
                user->receiveMessage(message);
            }
        }
    }
};

int main() {
    ChatMediator chatMediator;

    User user1(&chatMediator, "Alice");
    User user2(&chatMediator, "Bob");
    User user3(&chatMediator, "Charlie");

    chatMediator.addUser(&user1);
    chatMediator.addUser(&user2);
    chatMediator.addUser(&user3);

    user1.sendMessage("안녕하세요!");
    user2.sendMessage("반갑습니다!");

    return 0;
}
