Data contention: 여러 프로세서나 스레드가 동일한 데이터에 동시에 접근하려고 할 때 발생하는 문제
- 멀티코어 시스템에서 프로세서들이 동일한 메모리 위치를 수정하려 할 때 메모리 접근이 순차적으로 일어나야 하므로 성능이 저하

Cache Ping Pong: 멀티코어 시스템에서 서로 다른 프로세서 캐시 간에 동일한 데이터를 지속적으로 업데이트하며 발생하는 문제
- 프로세서 A가 데이터 X를 캐시하고 있을 때, 프로세서 B가 그 데이터를 수정하고 modify로 변경
프로세서 A는 캐시 사용할려고 할때 modify를 감지하고 데이터를 다시 가져옴 이걸 서로서로 하는 문제

False sharing: 멀티스레딩 환경에서 동일한 캐시 라인 내에 서로 다른 데이터를 수정하려 할 때 발생하는 성능 문제
 각 프로세서가 자신의 캐시에서 데이터에 접근하고 수정할 때, 두 프로세서가 서로 다른 변수를 수정해도 같은 캐시 라인에 포함되어 있으면 캐시 일관성 유지 과정에서 불필요한 캐시 동기화가 발생

구조체라고 치면 중간에 패딩하여 해결 (64바이트일때)
struct Data {
    int a;     // 프로세서 1이 수정하는 변수
    char pad[64];  // 캐시 라인 크기만큼 패딩 추가
    int b;     // 프로세서 2가 수정하는 변수
};